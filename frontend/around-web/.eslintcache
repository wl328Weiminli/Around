[{"/Users/wml/vscode project/Around /Around/frontend/around-web/src/index.js":"1","/Users/wml/vscode project/Around /Around/frontend/around-web/src/reportWebVitals.js":"2","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/App.js":"3","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/TopBar.js":"4","/Users/wml/vscode project/Around /Around/frontend/around-web/src/constants.js":"5","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/Main.js":"6","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/Home.js":"7","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/Register.js":"8","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/Login.js":"9","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/SearchBar.js":"10","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/PhotoGallery.js":"11","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/CreatePostButton.js":"12","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/PostForm.js":"13"},{"size":628,"mtime":1608616472202,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1608397587176,"results":"16","hashOfConfig":"15"},{"size":729,"mtime":1608508053755,"results":"17","hashOfConfig":"15"},{"size":609,"mtime":1608400971165,"results":"18","hashOfConfig":"15"},{"size":250,"mtime":1623178531734,"results":"19","hashOfConfig":"15"},{"size":959,"mtime":1623774182089,"results":"20","hashOfConfig":"15"},{"size":4154,"mtime":1608788534801,"results":"21","hashOfConfig":"15"},{"size":3485,"mtime":1608608408649,"results":"22","hashOfConfig":"15"},{"size":2414,"mtime":1608508528246,"results":"23","hashOfConfig":"15"},{"size":1613,"mtime":1608783909241,"results":"24","hashOfConfig":"15"},{"size":1514,"mtime":1608788322352,"results":"25","hashOfConfig":"15"},{"size":3239,"mtime":1623185417499,"results":"26","hashOfConfig":"15"},{"size":1847,"mtime":1608783899026,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"9f3xmy",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/wml/vscode project/Around /Around/frontend/around-web/src/index.js",[],["57","58"],"/Users/wml/vscode project/Around /Around/frontend/around-web/src/reportWebVitals.js",[],"/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/App.js",[],"/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/TopBar.js",[],"/Users/wml/vscode project/Around /Around/frontend/around-web/src/constants.js",[],"/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/Main.js",["59"],"/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/Home.js",["60","61","62"],"import React, { useState, useEffect } from \"react\";\nimport { Tabs, message, Row, Col, Button } from \"antd\";\nimport axios from \"axios\";\n\nimport SearchBar from \"./SearchBar\";\nimport PhotoGallery from \"./PhotoGallery\";\nimport CreatePostButton from \"./CreatePostButton\";\nimport { SEARCH_KEY, BASE_URL, TOKEN_KEY } from \"../constants\";\n\nconst { TabPane } = Tabs;\n\nfunction Home(props) {\n    const [posts, setPost] = useState([]);\n    const [activeTab, setActiveTab] = useState(\"image\");\n    const [searchOption, setSearchOption] = useState({\n        type: SEARCH_KEY.all,\n        keyword: \"\"\n    });\n\n    const handleSearch = (option) => {\n        const { type, keyword } = option;\n        setSearchOption({ type: type, keyword: keyword });\n    };\n\n    useEffect(() => {\n        const { type, keyword } = searchOption;\n        fetchPost(searchOption);\n    }, [searchOption]);\n\n    const fetchPost = (option) => {\n        const { type, keyword } = option;\n        let url = \"\";\n\n        if (type === SEARCH_KEY.all) {\n            url = `${BASE_URL}/search`;\n        } else if (type === SEARCH_KEY.user) {\n            url = `${BASE_URL}/search?user=${keyword}`;\n        } else {\n            url = `${BASE_URL}/search?keywords=${keyword}`;\n        }\n\n        const opt = {\n            method: \"GET\",\n            url: url,\n            headers: {\n                Authorization: `Bearer ${localStorage.getItem(TOKEN_KEY)}`\n            }\n        };\n\n        axios(opt)\n            .then((res) => {\n                if (res.status === 200) {\n                    console.log(res.data);\n                    setPost(res.data);\n                }\n            })\n            .catch((err) => {\n                message.error(\"Fetch posts failed!\");\n                console.log(\"fetch posts failed: \", err.message);\n            });\n    };\n\n    const renderPosts = (type) => {\n        if (!posts || posts.length === 0) {\n            return <div>No data!</div>;\n        }\n        if (type === \"image\") {\n            const imageArr = posts\n                .filter((item) => item.type === \"image\")\n                .map((image) => {\n                    return {\n                        src: image.url,\n                        user: image.user,\n                        caption: image.message,\n                        thumbnail: image.url,\n                        thumbnailWidth: 300,\n                        thumbnailHeight: 200\n                    };\n                });\n\n            return <PhotoGallery images={imageArr} />;\n        } else if (type === \"video\") {\n            return (\n                <Row gutter={32}>\n                    {posts\n                        .filter((post) => post.type === \"video\")\n                        .map((post) => (\n                            <Col span={8} key={post.url}>\n                                <video src={post.url} controls={true} className=\"video-block\" />\n                                <p>\n                                    {post.user}: {post.message}\n                                </p>\n                            </Col>\n                        ))}\n                </Row>\n            );\n        }\n    };\n\n    const showPost = (type) => {\n        console.log(\"type -> \", type);\n        setActiveTab(type);\n\n        setTimeout(() => {\n            setSearchOption({ type: SEARCH_KEY.all, keyword: \"\" });\n        }, 3000);\n    };\n\n    const operations = <CreatePostButton onShowPost={showPost} />;\n    return (\n        <div className=\"home\">\n            <SearchBar handleSearch={handleSearch} />\n            <div className=\"display\">\n                <Tabs\n                    onChange={(key) => setActiveTab(key)}\n                    defaultActiveKey=\"image\"\n                    activeKey={activeTab}\n                    tabBarExtraContent={operations}\n                >\n                    <TabPane tab=\"Images\" key=\"image\">\n                        {renderPosts(\"image\")}\n                    </TabPane>\n                    <TabPane tab=\"Videos\" key=\"video\">\n                        {renderPosts(\"video\")}\n                    </TabPane>\n                </Tabs>\n            </div>\n        </div>\n    );\n}\n\nexport default Home;\n","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/Register.js",[],"/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/Login.js",[],"/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/SearchBar.js",[],"/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/PhotoGallery.js",[],"/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/CreatePostButton.js",["63"],"import React, { Component, createRef } from \"react\";\nimport { Modal, Button, message } from \"antd\";\nimport axios from \"axios\";\n\nimport { PostForm } from \"./PostForm\";\nimport { BASE_URL, TOKEN_KEY } from \"../constants\";\n\nclass CreatePostButton extends Component {\n    state = {\n        visible: false,\n        confirmLoading: false\n    };\n\n    showModal = () => {\n        this.setState({\n            visible: true\n        });\n    };\n\n    handleOk = () => {\n        this.setState({\n            confirmLoading: true\n        });\n\n        // get form data\n        this.postForm\n            .validateFields()\n            .then((form) => {\n                const { description, uploadPost } = form;\n                const { type, originFileObj } = uploadPost[0];\n                const postType = type.match(/^(image|video)/g)[0];\n                if (postType) {\n                    let formData = new FormData();\n                    formData.append(\"message\", description);\n                    formData.append(\"media_file\", originFileObj);\n                    console.log(formData);\n                    const opt = {\n                        method: \"POST\",\n                        url: `${BASE_URL}/upload`,\n                        headers: {\n                            Authorization: `Bearer ${localStorage.getItem(TOKEN_KEY)}`\n                        },\n                        data: formData\n                    };\n\n                    axios(opt)\n                        .then((res) => {\n                            if (res.status === 200) {\n                                message.success(\"The image/video is uploaded!\");\n                                this.postForm.resetFields();\n                                this.handleCancel();\n                                this.props.onShowPost(postType);\n                                this.setState({ confirmLoading: false });\n                            }\n                        })\n                        .catch((err) => {\n                            console.log(\"Upload image/video failed: \", err.message);\n                            message.error(\"Failed to upload image/video!\");\n                            this.setState({ confirmLoading: false });\n                        });\n                }\n            })\n            .catch((err) => {\n                console.log(\"err ir validate form -> \", err);\n            });\n    };\n\n    handleCancel = () => {\n        console.log(\"Clicked cancel button\");\n        this.setState({\n            visible: false\n        });\n    };\n\n    render() {\n        const { visible, confirmLoading } = this.state;\n        return (\n            <div>\n                <Button type=\"primary\" onClick={this.showModal}>\n                    Create New Post\n                </Button>\n                <Modal\n                    title=\"Create New Post\"\n                    visible={visible}\n                    onOk={this.handleOk}\n                    okText=\"Create\"\n                    confirmLoading={confirmLoading}\n                    onCancel={this.handleCancel}\n                >\n                    <PostForm ref={(refInstance) => (this.postForm = refInstance)} />\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default CreatePostButton;\n","/Users/wml/vscode project/Around /Around/frontend/around-web/src/components/PostForm.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":25},{"ruleId":"68","severity":1,"message":"72","line":2,"column":35,"nodeType":"70","messageId":"71","endLine":2,"endColumn":41},{"ruleId":"68","severity":1,"message":"73","line":26,"column":17,"nodeType":"70","messageId":"71","endLine":26,"endColumn":21},{"ruleId":"68","severity":1,"message":"74","line":26,"column":23,"nodeType":"70","messageId":"71","endLine":26,"endColumn":30},{"ruleId":"68","severity":1,"message":"75","line":1,"column":28,"nodeType":"70","messageId":"71","endLine":1,"endColumn":37},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'type' is assigned a value but never used.","'keyword' is assigned a value but never used.","'createRef' is defined but never used.","no-global-assign","no-unsafe-negation"]